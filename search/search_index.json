{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"axia-pathfinder-client","text":"<p>This is an early start at writing a python client/sdk for the the telnet based API on Axia Pathfinder software/appliances from the Telos Alliance.</p> <p>Currently it is more a proof of concept rather than anything ready for production. We have plans to integrate it with our current songticker glue code.</p> <p>Please raise an issue if you would like to collaborate with Radio Bern RaBe on this python/pathfinder integration effort. We plan on primarily focusing this library on our needs but contributions are always welcome and we would be happy to accomodate you!</p>"},{"location":"#features","title":"Features","text":"<ul> <li>partially implements the \"SAPv2\" protocol as described in the pathfinder manual</li> <li>only \"LOGIN\", \"GET\" and \"SUB\" operators are currently supported</li> <li>\"INDI\" responses to \"GET\" requests get parsed and returned in a timeout governed timeout fashion</li> <li>Also works with xNode Telnet interfaces</li> <li>GPO responses to \"GPO\" requests are currently parsed</li> <li>Uses a PEG-style parser-combinator based on parsy to parse responses from the telnet interfaces</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>Please let us know what you would like to contribute before you get invested! This is really a proof of concept at this stage.</p>"},{"location":"#development","title":"Development","text":"<pre><code>python -mvenv venv\n. venv/bin/activate\n\npip install poetry\n\npoetry install\n</code></pre>"},{"location":"#pre-commit-hook","title":"pre-commit hook","text":"<pre><code>pip install pre-commit\npre-commit run -a\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<pre><code>poetry run pytest\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>pathfinder<ul> <li>operators<ul> <li>base</li> <li>get</li> <li>gpo</li> <li>login</li> <li>sub</li> </ul> </li> <li>parser</li> <li>telnet</li> </ul> </li> </ul>"},{"location":"reference/pathfinder/","title":"pathfinder","text":""},{"location":"reference/pathfinder/parser/","title":"parser","text":""},{"location":"reference/pathfinder/telnet/","title":"telnet","text":"<p>Wrapper around telnetlib.</p> <p>from pathfinder.telnet import TelnetClient tc = TelnetClient() tc.connect() tc.disconnect()</p>"},{"location":"reference/pathfinder/telnet/#pathfinder.telnet.TelnetClient","title":"<code>TelnetClient</code>","text":"<p>Telnet client handler.</p> Source code in <code>pathfinder/telnet.py</code> <pre><code>class TelnetClient:\n    \"\"\"Telnet client handler.\"\"\"\n\n    config = {\"host\": \"localhost\", \"port\": 9600, \"timeout\": 1}\n\n    def __init__(self, config={}):\n        self.config = {**self.config, **config}\n        self.client = telnetlib.Telnet()\n\n    def connect(self):\n        \"\"\"Connect the client.\"\"\"\n        try:\n            self.client.open(\n                self.config.get(\"host\"),\n                self.config.get(\"port\"),\n                self.config.get(\"timeout\"),\n            )\n        except Exception as ex:\n            logger.error(\"Error connecting telnet client\")\n            raise TelnetClientException(ex)\n\n    def disconnect(self):\n        \"\"\"Disconnect the client.\"\"\"\n        try:\n            self.client.close()\n        except Exception as ex:\n            logger.error(\"Error disconnecting telnet client\")\n            raise TelnetClientException(ex)\n</code></pre>"},{"location":"reference/pathfinder/telnet/#pathfinder.telnet.TelnetClient.connect","title":"<code>connect()</code>","text":"<p>Connect the client.</p> Source code in <code>pathfinder/telnet.py</code> <pre><code>def connect(self):\n    \"\"\"Connect the client.\"\"\"\n    try:\n        self.client.open(\n            self.config.get(\"host\"),\n            self.config.get(\"port\"),\n            self.config.get(\"timeout\"),\n        )\n    except Exception as ex:\n        logger.error(\"Error connecting telnet client\")\n        raise TelnetClientException(ex)\n</code></pre>"},{"location":"reference/pathfinder/telnet/#pathfinder.telnet.TelnetClient.disconnect","title":"<code>disconnect()</code>","text":"<p>Disconnect the client.</p> Source code in <code>pathfinder/telnet.py</code> <pre><code>def disconnect(self):\n    \"\"\"Disconnect the client.\"\"\"\n    try:\n        self.client.close()\n    except Exception as ex:\n        logger.error(\"Error disconnecting telnet client\")\n        raise TelnetClientException(ex)\n</code></pre>"},{"location":"reference/pathfinder/telnet/#pathfinder.telnet.TelnetClientException","title":"<code>TelnetClientException</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Exceptions raised by TelnetClient.</p> Source code in <code>pathfinder/telnet.py</code> <pre><code>class TelnetClientException(Exception):\n    \"\"\"Exceptions raised by TelnetClient.\"\"\"\n\n    pass\n</code></pre>"},{"location":"reference/pathfinder/operators/","title":"operators","text":""},{"location":"reference/pathfinder/operators/base/","title":"base","text":""},{"location":"reference/pathfinder/operators/get/","title":"get","text":"<p>Get data from pathfinder.</p>"},{"location":"reference/pathfinder/operators/gpo/","title":"gpo","text":"<p>Get data from pathfinder.</p>"},{"location":"reference/pathfinder/operators/login/","title":"login","text":"<p>Login to pathfinder.</p> <p>from pathfinder.operators.login import Login c = {\"host\": \"pathfinder\", \"user\": \"Admin\", \"pass\": \"Admin\"} l = Login(client=client, config=c) l.execute() True c = {\"host\": \"pathfinder\", \"user\": \"Admin\", \"pass\": \"Nope\"} l = Login(client=client, config=c) l.execute() False</p>"},{"location":"reference/pathfinder/operators/sub/","title":"sub","text":"<p>SUB operator</p> <p>https://docs.telosalliance.com/pathfinder-core-pro/pathfindercore-pro/appendix-a-sapv2#subscription-examples</p>"}]}